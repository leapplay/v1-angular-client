/**
 * Leap Play
 * Learn more at https://www.leap-play.com
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CreatedSession } from '../model/createdSession';
import { RequestCreateStation } from '../model/requestCreateStation';
import { RequestNewStationSession } from '../model/requestNewStationSession';
import { RequestSessionUpdate } from '../model/requestSessionUpdate';
import { RequestSetStationPassword } from '../model/requestSetStationPassword';
import { RequestStationMode } from '../model/requestStationMode';
import { RequestStationQrCode } from '../model/requestStationQrCode';
import { RequestStationSettings } from '../model/requestStationSettings';
import { SessionLog } from '../model/sessionLog';
import { StationCurrentState } from '../model/stationCurrentState';
import { StationSettings } from '../model/stationSettings';
import { StoppedSession } from '../model/stoppedSession';
import { UpdatedSession } from '../model/updatedSession';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StationsService {

    protected basePath = 'https://api.leap-play.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates a Station (Auth)
     * 
     * @param createStation Create Station Dto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createStation(createStation?: RequestCreateStation, observe?: 'body', reportProgress?: boolean): Observable<StationSettings>;
    public createStation(createStation?: RequestCreateStation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StationSettings>>;
    public createStation(createStation?: RequestCreateStation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StationSettings>>;
    public createStation(createStation?: RequestCreateStation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<StationSettings>(`${this.basePath}/api/v1/stations`,
            createStation,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets closed Sessions from all stations (Auth)
     * 
     * @param take Entries to return
     * @param skip Entries to skip
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSessionLogsAll(take?: number, skip?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<SessionLog>>;
    public getSessionLogsAll(take?: number, skip?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SessionLog>>>;
    public getSessionLogsAll(take?: number, skip?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SessionLog>>>;
    public getSessionLogsAll(take?: number, skip?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (take !== undefined && take !== null) {
            queryParameters = queryParameters.set('take', <any>take);
        }
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SessionLog>>(`${this.basePath}/api/v1/stations/sessions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets closed Sessions (Auth)
     * 
     * @param stationId Station Id
     * @param take Entries to return
     * @param skip Entries to skip
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSessionLogsByStationId(stationId: string, take?: number, skip?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<SessionLog>>;
    public getSessionLogsByStationId(stationId: string, take?: number, skip?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SessionLog>>>;
    public getSessionLogsByStationId(stationId: string, take?: number, skip?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SessionLog>>>;
    public getSessionLogsByStationId(stationId: string, take?: number, skip?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (stationId === null || stationId === undefined) {
            throw new Error('Required parameter stationId was null or undefined when calling getSessionLogsByStationId.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (take !== undefined && take !== null) {
            queryParameters = queryParameters.set('take', <any>take);
        }
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SessionLog>>(`${this.basePath}/api/v1/stations/${encodeURIComponent(String(stationId))}/sessions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the Settings of all Stations (Auth)
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSettings(observe?: 'body', reportProgress?: boolean): Observable<Array<StationSettings>>;
    public getSettings(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StationSettings>>>;
    public getSettings(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StationSettings>>>;
    public getSettings(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StationSettings>>(`${this.basePath}/api/v1/stations/settings`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the Settings of an Station (Auth)
     * 
     * @param stationId Station Id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSettingsByStationId(stationId: string, observe?: 'body', reportProgress?: boolean): Observable<StationSettings>;
    public getSettingsByStationId(stationId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StationSettings>>;
    public getSettingsByStationId(stationId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StationSettings>>;
    public getSettingsByStationId(stationId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (stationId === null || stationId === undefined) {
            throw new Error('Required parameter stationId was null or undefined when calling getSettingsByStationId.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<StationSettings>(`${this.basePath}/api/v1/stations/${encodeURIComponent(String(stationId))}/settings`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the Station&#39;s State (Auth)
     * 
     * @param stationId Station Id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getState(stationId: string, observe?: 'body', reportProgress?: boolean): Observable<StationCurrentState>;
    public getState(stationId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StationCurrentState>>;
    public getState(stationId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StationCurrentState>>;
    public getState(stationId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (stationId === null || stationId === undefined) {
            throw new Error('Required parameter stationId was null or undefined when calling getState.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<StationCurrentState>(`${this.basePath}/api/v1/stations/${encodeURIComponent(String(stationId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Collection of Station States (Auth)
     * 
     * @param networkStateFilter Optional Network State Filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStates(networkStateFilter?: 'Disconnected' | 'Connecting' | 'Connected', observe?: 'body', reportProgress?: boolean): Observable<Array<StationCurrentState>>;
    public getStates(networkStateFilter?: 'Disconnected' | 'Connecting' | 'Connected', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StationCurrentState>>>;
    public getStates(networkStateFilter?: 'Disconnected' | 'Connecting' | 'Connected', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StationCurrentState>>>;
    public getStates(networkStateFilter?: 'Disconnected' | 'Connecting' | 'Connected', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (networkStateFilter !== undefined && networkStateFilter !== null) {
            queryParameters = queryParameters.set('networkStateFilter', <any>networkStateFilter);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StationCurrentState>>(`${this.basePath}/api/v1/stations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a Session (Auth)
     * 
     * @param stationId Station Id
     * @param createSessionRequest New Session Request Dto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sessionCreate(stationId: string, createSessionRequest?: RequestNewStationSession, observe?: 'body', reportProgress?: boolean): Observable<CreatedSession>;
    public sessionCreate(stationId: string, createSessionRequest?: RequestNewStationSession, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreatedSession>>;
    public sessionCreate(stationId: string, createSessionRequest?: RequestNewStationSession, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreatedSession>>;
    public sessionCreate(stationId: string, createSessionRequest?: RequestNewStationSession, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (stationId === null || stationId === undefined) {
            throw new Error('Required parameter stationId was null or undefined when calling sessionCreate.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CreatedSession>(`${this.basePath}/api/v1/stations/${encodeURIComponent(String(stationId))}/sessions`,
            createSessionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Stops the running Session (Auth)
     * 
     * @param stationId Station Id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sessionStop(stationId: string, observe?: 'body', reportProgress?: boolean): Observable<StoppedSession>;
    public sessionStop(stationId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StoppedSession>>;
    public sessionStop(stationId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StoppedSession>>;
    public sessionStop(stationId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (stationId === null || stationId === undefined) {
            throw new Error('Required parameter stationId was null or undefined when calling sessionStop.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<StoppedSession>(`${this.basePath}/api/v1/stations/${encodeURIComponent(String(stationId))}/sessions/current/stop`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the running Session. (Auth)
     * 
     * @param stationId Station Id
     * @param updateSessionRequest The Update Request Dto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sessionUpdate(stationId: string, updateSessionRequest?: RequestSessionUpdate, observe?: 'body', reportProgress?: boolean): Observable<UpdatedSession>;
    public sessionUpdate(stationId: string, updateSessionRequest?: RequestSessionUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdatedSession>>;
    public sessionUpdate(stationId: string, updateSessionRequest?: RequestSessionUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdatedSession>>;
    public sessionUpdate(stationId: string, updateSessionRequest?: RequestSessionUpdate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (stationId === null || stationId === undefined) {
            throw new Error('Required parameter stationId was null or undefined when calling sessionUpdate.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UpdatedSession>(`${this.basePath}/api/v1/stations/${encodeURIComponent(String(stationId))}/sessions/current/update`,
            updateSessionRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the Settings for an Station (Auth)
     * 
     * @param stationId Station Id
     * @param setSettingsRequest Settings Dto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setSettings(stationId: string, setSettingsRequest?: RequestStationSettings, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setSettings(stationId: string, setSettingsRequest?: RequestStationSettings, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setSettings(stationId: string, setSettingsRequest?: RequestStationSettings, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setSettings(stationId: string, setSettingsRequest?: RequestStationSettings, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (stationId === null || stationId === undefined) {
            throw new Error('Required parameter stationId was null or undefined when calling setSettings.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/stations/${encodeURIComponent(String(stationId))}/settings`,
            setSettingsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the Operation Mode (Auth)
     * 
     * @param stationId Station Id
     * @param setModeRequest The Operation Mode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setStationMode(stationId: string, setModeRequest?: RequestStationMode, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setStationMode(stationId: string, setModeRequest?: RequestStationMode, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setStationMode(stationId: string, setModeRequest?: RequestStationMode, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setStationMode(stationId: string, setModeRequest?: RequestStationMode, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (stationId === null || stationId === undefined) {
            throw new Error('Required parameter stationId was null or undefined when calling setStationMode.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/stations/${encodeURIComponent(String(stationId))}/settings/mode`,
            setModeRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Changes the Password (Auth)
     * 
     * @param stationId Station Id
     * @param setPasswordRequest New Password
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setStationPassword(stationId: string, setPasswordRequest?: RequestSetStationPassword, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setStationPassword(stationId: string, setPasswordRequest?: RequestSetStationPassword, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setStationPassword(stationId: string, setPasswordRequest?: RequestSetStationPassword, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setStationPassword(stationId: string, setPasswordRequest?: RequestSetStationPassword, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (stationId === null || stationId === undefined) {
            throw new Error('Required parameter stationId was null or undefined when calling setStationPassword.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/stations/${encodeURIComponent(String(stationId))}/settings/password`,
            setPasswordRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the QrCode (Auth)
     * 
     * @param stationId Station Id
     * @param setQrCodeRequest QrCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setStationQrCode(stationId: string, setQrCodeRequest?: RequestStationQrCode, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setStationQrCode(stationId: string, setQrCodeRequest?: RequestStationQrCode, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setStationQrCode(stationId: string, setQrCodeRequest?: RequestStationQrCode, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setStationQrCode(stationId: string, setQrCodeRequest?: RequestStationQrCode, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (stationId === null || stationId === undefined) {
            throw new Error('Required parameter stationId was null or undefined when calling setStationQrCode.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/stations/${encodeURIComponent(String(stationId))}/settings/qrcode`,
            setQrCodeRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
