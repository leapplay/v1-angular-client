/**
 * Leap Play
 * Learn more at https://www.leap-play.com
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ChangedPasswordUser } from '../model/changedPasswordUser';
import { RequestChangePassword } from '../model/requestChangePassword';
import { RequestEmailConfirmation } from '../model/requestEmailConfirmation';
import { RequestForgotPassword } from '../model/requestForgotPassword';
import { RequestRegisterUser } from '../model/requestRegisterUser';
import { RequestResendConfirmationEmail } from '../model/requestResendConfirmationEmail';
import { RequestResetPassword } from '../model/requestResetPassword';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AccountsService {

    protected basePath = 'https://api.leap-play.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Changes the Password and provides a new Refresh Token (Auth)
     * 
     * @param changePasswordRequest The change password request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changePassword(changePasswordRequest: RequestChangePassword, observe?: 'body', reportProgress?: boolean): Observable<ChangedPasswordUser>;
    public changePassword(changePasswordRequest: RequestChangePassword, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ChangedPasswordUser>>;
    public changePassword(changePasswordRequest: RequestChangePassword, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ChangedPasswordUser>>;
    public changePassword(changePasswordRequest: RequestChangePassword, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (changePasswordRequest === null || changePasswordRequest === undefined) {
            throw new Error('Required parameter changePasswordRequest was null or undefined when calling changePassword.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ChangedPasswordUser>(`${this.basePath}/api/v1/accounts/password/change`,
            changePasswordRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Confirms ownership of an E-Mail Address by an E-Mail Confirmation Token
     * 
     * @param emailConfirmationRequest The request email confirmation.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public confirmEmail(emailConfirmationRequest: RequestEmailConfirmation, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public confirmEmail(emailConfirmationRequest: RequestEmailConfirmation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public confirmEmail(emailConfirmationRequest: RequestEmailConfirmation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public confirmEmail(emailConfirmationRequest: RequestEmailConfirmation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (emailConfirmationRequest === null || emailConfirmationRequest === undefined) {
            throw new Error('Required parameter emailConfirmationRequest was null or undefined when calling confirmEmail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/accounts/email/confirmation`,
            emailConfirmationRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Registers a User Account
     * 
     * @param registerRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public register(registerRequest: RequestRegisterUser, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public register(registerRequest: RequestRegisterUser, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public register(registerRequest: RequestRegisterUser, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public register(registerRequest: RequestRegisterUser, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (registerRequest === null || registerRequest === undefined) {
            throw new Error('Required parameter registerRequest was null or undefined when calling register.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/accounts/register`,
            registerRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Receives a Reset Token that is required to reset the Password
     * 
     * @param forgotPasswordRequest Request object holding the required parameter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public requestPassword(forgotPasswordRequest: RequestForgotPassword, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public requestPassword(forgotPasswordRequest: RequestForgotPassword, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public requestPassword(forgotPasswordRequest: RequestForgotPassword, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public requestPassword(forgotPasswordRequest: RequestForgotPassword, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (forgotPasswordRequest === null || forgotPasswordRequest === undefined) {
            throw new Error('Required parameter forgotPasswordRequest was null or undefined when calling requestPassword.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/accounts/password/forgot`,
            forgotPasswordRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Re-sends a message with a EMail Confirmation Token.
     * 
     * @param resendConfirmationEmailRequest The resend email confirmation request.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resendEMailConfirmation(resendConfirmationEmailRequest: RequestResendConfirmationEmail, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resendEMailConfirmation(resendConfirmationEmailRequest: RequestResendConfirmationEmail, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resendEMailConfirmation(resendConfirmationEmailRequest: RequestResendConfirmationEmail, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resendEMailConfirmation(resendConfirmationEmailRequest: RequestResendConfirmationEmail, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (resendConfirmationEmailRequest === null || resendConfirmationEmailRequest === undefined) {
            throw new Error('Required parameter resendConfirmationEmailRequest was null or undefined when calling resendEMailConfirmation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/accounts/email/confirmation/send`,
            resendConfirmationEmailRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Resets the Password with an Reset Token
     * 
     * @param resetPasswordRequest The request reset password.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetPassword(resetPasswordRequest: RequestResetPassword, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetPassword(resetPasswordRequest: RequestResetPassword, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetPassword(resetPasswordRequest: RequestResetPassword, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetPassword(resetPasswordRequest: RequestResetPassword, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (resetPasswordRequest === null || resetPasswordRequest === undefined) {
            throw new Error('Required parameter resetPasswordRequest was null or undefined when calling resetPassword.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/accounts/password/reset`,
            resetPasswordRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
